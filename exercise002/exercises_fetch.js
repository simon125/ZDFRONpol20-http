// FUNKCJE UTILITY KT√ìRE S≈ÅU≈ªƒÑ DO INTERAKCJI Z UI
// showToast();
// showSpinner();
// hideSpinner();
// onDeleteClick();
/**
 *
 * No dobrze ale stety/niestety request√≥w za pomocƒÖ XMLHttpRequest ju≈º siƒô nie robi w praktyce
 * powstaly do tego przyjemniejsze narzƒôdzia i API jednym z nich jest fetch API kt√≥re jest wbudowane w przeglƒÖdarke
 *
 *
 * funckja fetch umo≈ºliwia robienie request√≥w i ZWRACA PROMISE kt√≥ra u≈Çatwia obs≈Çugƒô asynchroniczno≈õci
 *
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
 *
 * fetch('https://jsonplaceholder.typicode.com/posts/1/comments')
 * .then((response) => response.json())
 * .then((json) => console.log(json));
 *
 */

// fetch("https://jsonplaceholder.typicode.com/posts/1/comments")
//   .then((response) => response.json())
//   .then((json) => console.log(json));

/**
 * utw√≥rz funkcje getPosts kt√≥ra pobiera posty ze znanego Ci ju≈º API https://jsonplaceholder.typicode.com/posts
 * do wykonania zadania u≈ºyj nowo poznanej funkcji fetch
 *
 *
 * hint 1üí° niech funckja getPosts zwraca wywo≈Çanie funkcji fetch dziƒôki temu bƒôdzie mo≈ºna u≈ºyƒá then przy wywo≈Çaniu
 * funcji getPosts
 *
 * part 2
 * dodaj "opcjonalny" parametr do funkcji kt√≥ry mo≈ºe s≈Çu≈ºyƒá do sparametryzowania requestu
 * czyli po ludzku dodaj parametr i ifa kt√≥ry sprawdza czy ten parametr jest
 * je≈ºeli nie ma zr√≥b request pod ten url https://jsonplaceholder.typicode.com/posts
 * je≈ºeli id jest to doklej tego IDka do ko≈Ñca adresu URL (konkatenacja string√≥w)
 * https://jsonplaceholder.typicode.com/posts/${parametr} // w tym przypadku id postu
 *
 */

/**
 * jak u≈ºyƒá fetcha do stworzenia rekordu?
 *
 * metoda POST + JSON.stringify(body) + na≈Ç√≥wke content type
 *
 * przyk≈Çad na nowym api
 */

/*
POST
https://fine-pear-cow-tux.cyclic.app/users
*/

/**
 * utw√≥rz funkcje createPost kt√≥ra s≈Çu≈ºy do swtorzenia postu w tym celu
 * bƒôdziesz musia≈Ç u≈ºyƒá zapytania typu POST oraz przekazaƒá parametry do stworzenia postu
 * zerknijcie do dokumentacji jak to dok≈Çadnie zrobiƒá
 * do wykonania zadania u≈ºyj nowo poznanej funkcji fetch
 *
 * https://jsonplaceholder.typicode.com/guide/  sekcja Creating a resource
 *
 * do wykonania zadania mo≈ºesz u≈ºyƒá danych wype≈Çnionych w formularzu lub te≈º danych mockowych
 *
 * czym sƒÖ dane mockowe ‚ùì‚ùì‚ùì
 * 
 * 
 * 
{
"userId": 10,
"id": 98,
"title": "laboriosam dolor voluptates",
"body": "doloremque ex facilis sit sint culpa\nsoluta assumenda eligendi non ut eius\nsequi ducimus vel quasi\nveritatis est dolores"
}
 *
 */

document.querySelector("#createPost").addEventListener("submit", (e) => {
  e.preventDefault();
  const cleanFormFields = () => e.target.reset();
  const formData = new FormData(e.target);

  console.log(formData);

  cleanFormFields();
});

/**
 *
 * czas na edycje rekordu - w tym celu stw√≥rz funkcje editPost kt√≥ra bƒôdzie wykonywa≈Ça zapytanie typu PUT
 * do funkcji editPost musisz podaƒá pola obiektu kt√≥re chcesz edytowaƒá
 *
 * po wiƒôcej informacji zerknij do dokumentacji API
 * https://jsonplaceholder.typicode.com/guide/   sekcja Updating a resource
 *
 * do wykonania zadania mo≈ºesz u≈ºyƒá danych wype≈Çnionych w formularzu lub te≈º danych mockowych
 *
 */

document.querySelector("#createPost").addEventListener("submit", (e) => {
  e.preventDefault();
  const cleanFormFields = () => e.target.reset();
  const formData = new FormData(e.target);
  const formProps = Object.fromEntries(formData);
  console.log(formProps);

  /**
   * Miejsce na tw√≥j kod
   *
   *
   *
   */
});

/**
 *
 * zasubmitowa≈Çe≈õ/a≈õ formularz ale zanim wykorzystasz dane do tworzenia rekordu
 * system musi wykonaƒá request jest on ju≈º zrobiony przy pomocy funkcji processData
 * kt√≥ry zwraca dane w promise kt√≥re mo≈ºesz u≈ºyƒá do stworzenia requestu
 *
 * wykorzystaj dane kt√≥re zwraca funkcja processData
 * i stw√≥rz nowy post robiƒÖc podoby request jak w jednym z poprzednich zada≈Ñ
 *
 * potrzebny urlüí°
 * https://jsonplaceholder.typicode.com/posts
 *
 */

document.querySelector("#createPost").addEventListener("submit", (e) => {
  e.preventDefault();
  const cleanFormFields = () => e.target.reset();
  processData(e).then((d) => console.log(d));

  /**
   * Miejsce na tw√≥j kod
   *
   *
   *
   */
});

/**
 *
 * na ekranie mamy listƒô post√≥w wy≈õwietlonƒÖ w tabelce z takimi kolumnami jak post id tytu≈Ç oraz przycisk
 * kt√≥ry potencjalnie mo≈ºe s≈Çu≈ºyƒá do usuwania post√≥w
 * ≈ºeby jednak usunƒÖƒá go musimy zrobiƒá request do usuwnia
 *
 * usuwanie ma siƒô wykonywaƒá po kliknieciu przycisku do tego celu stworzy≈Çem funkcje kt√≥ra obs≈Çuguje
 * "przyciskanie przycisk√≥w" w tabelce przyjmuje ona funckje calback zachƒôcam do poexperymentowania
 * mo≈ºe jest tam ukryty parametr? spr√≥buj sprawdziƒá sam :)
 *
 * onDeleteClick(() => console.log('cze≈õƒá'));
 *
 * hint üí° do wykonania tego zadania bƒôdziesz musia≈Ç/a≈Ça stworzyƒá request DELETE po taki
 * https://jsonplaceholder.typicode.com/posts/:postId URL gdzie postId jest dynamiczny i ma byƒá przekazywny
 * przez parametr
 *
 *
 */

onDeleteClick((id) => {
  console.log(id);
});

/**
 * DO DODATKOWYCH ƒÜWICZE≈É U≈ªYJ UI
 */

/**
 * Praktyka w≈Çasna
 *
 * jako frontend deweloper bƒôdziesz pracowaƒá/a≈Ça z r√≥≈ºnymi listami i filtrami kt√≥re pozwolƒÖ na pobranie
 * tylko intetresujƒÖcych dla usera rekord√≥w
 *
 * poni≈ºej znajdujƒÖ siƒô trzy bloki (nie musisz wiedzieƒá co one robiƒÖ ale tldr obs≈ÇugujƒÖ elementy/inputy na
 * stronie i dajƒÖ Ci warto≈õci z kt√≥rymi mo≈ºesz pracowaƒá)
 * wykorzystaj miejsca na tw√≥j kod i stw√≥rzcie przyk≈Çadowe scenariusze
 *
 * np.
 * stw√≥rz zmiennƒÖ w global scopie na przechowywanie collectionName i userId
 * wykonaj request w momencie gdy user kliknie przycisk (patrz 3 blok)
 *
 * zachƒôcam do skorzystania z guide https://jsonplaceholder.typicode.com/guide/
 * praca z dokumentacjƒÖ to nieod≈ÇƒÖczona czƒô≈õƒá pracy programisty
 *
 *
 * /posts/1/comments
 * /albums/1/photos
 * /users/1/albums
 * /users/1/todos
 * /users/1/posts
 */

document.querySelector("#collectionSelect").addEventListener("change", (e) => {
  const collectionName = e.target.value; // todos || posts || albums

  /**
   * Miejsce na tw√≥j kod
   * kod zadzia≈Ça jak user zmieni wartosƒá w inpucie
   *
   *
   *
   */
});

document.querySelector("#userId").addEventListener("change", (e) => {
  const userId = e.target.valueAsNumber;

  /**
   * Miejsce na tw√≥j kod
   * kod zadzia≈Ça jak user zmieni opcje w selectie
   *
   *
   *
   */
});

document.querySelector("#submit").addEventListener("click", () => {
  /**
   * Miejsce na tw√≥j kod
   * kod zadzia≈Ça jak user kliknie przycisk submit
   *
   *
   */
});
